# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug, Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Conan
      run: |
        pip install conan
        conan profile detect --force

    - name: Install Conan packages
      run: >
        conan install .
        --build=missing
        --settings=build_type=${{ matrix.build_type }}
        -o options/all:install_ccache=True
        -o options/all:install_make=True
        -o options/all:install_ninja=True

    - name: Activate Conan environment (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        & 'Get-ChildItem -Path . -Recurse -Include conanbuild.*,deactivate_conanbuild.* -Name | Select-Object -First 1'

    - name: Activate Conan environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        source `find ${{ github.workspace }} -name "conanbuild.*" | head -1`

    - name: Test virtual environment
      run: make --version

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DENABLE_UNIT_TEST=ON
        -DCMAKE_TOOLCHAIN_FILE=$(Get-ChildItem -Path ${{ github.workspace }} -Recurse -Include conan_toolchain.cmake -Name | Select-Object -First 1)
        -S ${{ github.workspace }}

    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DENABLE_UNIT_TEST=ON
        -DCMAKE_TOOLCHAIN_FILE=$(find ${{ github.workspace }} -name "conan_toolchain.cmake" | head -1)
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/test
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
